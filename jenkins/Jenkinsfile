node {
   // Mark the code checkout 'stage'....
   stage 'Checkout'

   // Get some code from a GitHub repository
   git url: 'https://github.com/kevcodez/Metronom-REST-API.git'
}

node {
    stage 'Build'
    
    // Run the maven build
    sh "mvn -B verify"
    
    step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
}

node {
  stage 'Analyze with SonarQube'
  sh "/var/lib/jenkins/tools/hudson.plugins.sonar.SonarRunnerInstallation/sonarqube_runner/bin/sonar-runner -e -Dsonar.host.url=http://kevcodez.de:9000/ -Dsonar.login=${sonarLogin} -Dsonar.language=java -Dsonar.projectName=Metronom -Dsonar.projectVersion=0.1 -Dsonar.sourceEncoding=UTF-8 -Dsonar.projectKey=de.kevcodez:metronom -Dsonar.sources=src -Dsonar.java.binaries=target/classes -Dsonar.projectBaseDir=."
}
   
node {
    
  stage 'Generate JavaDoc'
  sh "mvn javadoc:javadoc -Dcharset=UTF-8 -Ddocencoding=UTF-8"
}

node {
    stage 'Build docker image'
    sh "docker build -t kevcodez:metronom ./docker"
}

node {
    stage 'Remove old docker container'
    
    sh 'docker ps -q $1 | wc -l > commandResult'
    result = readFile('commandResult').trim()
    
    if (result != '0') {
        sh 'docker stop $(docker ps -a -q)'
        sh 'docker rm $(docker ps -a -q)'
    }
    
    stage 'Run docker container'
    
    sh "docker run --name metronom -d -it -p 9990:9990 -p ${wildflyHttpPort}:${wildflyHttpPort} kevcodez:metronom"
    
    stage 'Deploy WAR'
    
    sh "docker cp ./target/metronom.war metronom:/opt/jboss/wildfly/standalone/deployments/"
}
